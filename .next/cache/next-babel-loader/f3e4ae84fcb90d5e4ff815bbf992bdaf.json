{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/www/sites/firebreak-nextjs/src/pages/jobs/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../../layouts/default';\nimport TitleBanner from '../../components/TitleBanner';\nimport ImageBanner from '../../components/ImageBanner';\nimport Listing from '../../components/Listing';\n\nvar JobsIndex = function JobsIndex(_ref) {\n  var jobs = _ref.jobs,\n      title = _ref.title,\n      body = _ref.body,\n      image = _ref.image;\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, __jsx(TitleBanner, {\n    title: title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }), __jsx(ImageBanner, {\n    image: image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), image && __jsx(\"img\", {\n    src: \"http://127.0.0.1:8888/\".concat(image),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), jobs.map(function (_ref2, key) {\n    var id = _ref2.id,\n        attributes = _ref2.attributes;\n    return __jsx(Listing, _extends({\n      type: \"job\",\n      id: id,\n      key: key\n    }, attributes, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }));\n  }));\n};\n\nJobsIndex.getInitialProps = function _callee() {\n  var pageResponse, _ref3, page, _page$attributes, title, body, jobsResponse, _ref4, jobs, field_image, imageResponse, _ref5, image;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('http://127.0.0.1:8888/jsonapi/node/page/d531df90-0fb9-4475-bdc6-8222b22924c7'));\n\n        case 2:\n          pageResponse = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(pageResponse.json());\n\n        case 5:\n          _ref3 = _context.sent;\n          page = _ref3.data;\n          _page$attributes = page.attributes, title = _page$attributes.title, body = _page$attributes.body; // fetch `jobs` content-types\n\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(fetch('http://127.0.0.1:8888/jsonapi/node/jobs/'));\n\n        case 10:\n          jobsResponse = _context.sent;\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(jobsResponse.json());\n\n        case 13:\n          _ref4 = _context.sent;\n          jobs = _ref4.data;\n          // fetch `field_image`\n          field_image = page.relationships.field_image;\n          _context.next = 18;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(field_image.links.related.href)));\n\n        case 18:\n          imageResponse = _context.sent;\n          _context.next = 21;\n          return _regeneratorRuntime.awrap(imageResponse.json());\n\n        case 21:\n          _ref5 = _context.sent;\n          image = _ref5.data;\n          return _context.abrupt(\"return\", {\n            title: title,\n            body: body,\n            image: {\n              path: image.attributes.uri.url,\n              alt: field_image.data.meta.alt\n            },\n            jobs: jobs\n          });\n\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default JobsIndex;","map":{"version":3,"sources":["/www/sites/firebreak-nextjs/src/pages/jobs/index.tsx"],"names":["fetch","Layout","TitleBanner","ImageBanner","Listing","JobsIndex","jobs","title","body","image","map","key","id","attributes","getInitialProps","pageResponse","json","page","data","jobsResponse","field_image","relationships","links","related","href","imageResponse","path","uri","url","alt","meta"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,OAAP,MAAoB,0BAApB;;AAYA,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,MAAGC,IAAH,QAAGA,IAAH;AAAA,MAASC,KAAT,QAASA,KAAT;AAAA,MAAgBC,IAAhB,QAAgBA,IAAhB;AAAA,MAAsBC,KAAtB,QAAsBA,KAAtB;AAAA,SAChB,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAa,IAAA,KAAK,EAAEF,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,WAAD;AAAa,IAAA,KAAK,EAAEE,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGGA,KAAK,IAAI;AAAK,IAAA,GAAG,kCAA2BA,KAA3B,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHZ,EAKIH,IAAI,CAACI,GAAL,CAAS,iBAAqBC,GAArB;AAAA,QAAGC,EAAH,SAAGA,EAAH;AAAA,QAAOC,UAAP,SAAOA,UAAP;AAAA,WACP,MAAC,OAAD;AACE,MAAA,IAAI,OADN;AAEE,MAAA,EAAE,EAAED,EAFN;AAGE,MAAA,GAAG,EAAED;AAHP,OAIME,UAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADO;AAAA,GAAT,CALJ,CADgB;AAAA,CAAlB;;AAkBAR,SAAS,CAACS,eAAV,GAA4B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAECd,KAAK,CAAC,8EAAD,CAFN;;AAAA;AAEpBe,UAAAA,YAFoB;AAAA;AAAA,2CAGGA,YAAY,CAACC,IAAb,EAHH;;AAAA;AAAA;AAGZC,UAAAA,IAHY,SAGlBC,IAHkB;AAAA,6BAIFD,IAAI,CAACJ,UAJH,EAIlBN,KAJkB,oBAIlBA,KAJkB,EAIXC,IAJW,oBAIXA,IAJW,EAM1B;;AAN0B;AAAA,2CAOCR,KAAK,CAAC,0CAAD,CAPN;;AAAA;AAOpBmB,UAAAA,YAPoB;AAAA;AAAA,2CAQGA,YAAY,CAACH,IAAb,EARH;;AAAA;AAAA;AAQZV,UAAAA,IARY,SAQlBY,IARkB;AAU1B;AACQE,UAAAA,WAXkB,GAWFH,IAAI,CAACI,aAXH,CAWlBD,WAXkB;AAAA;AAAA,2CAYEpB,KAAK,WAAIoB,WAAW,CAACE,KAAZ,CAAkBC,OAAlB,CAA0BC,IAA9B,EAZP;;AAAA;AAYpBC,UAAAA,aAZoB;AAAA;AAAA,2CAaIA,aAAa,CAACT,IAAd,EAbJ;;AAAA;AAAA;AAaZP,UAAAA,KAbY,SAalBS,IAbkB;AAAA,2CAenB;AACLX,YAAAA,KAAK,EAALA,KADK;AAELC,YAAAA,IAAI,EAAJA,IAFK;AAGLC,YAAAA,KAAK,EAAE;AACLiB,cAAAA,IAAI,EAAEjB,KAAK,CAACI,UAAN,CAAiBc,GAAjB,CAAqBC,GADtB;AAELC,cAAAA,GAAG,EAAET,WAAW,CAACF,IAAZ,CAAiBY,IAAjB,CAAsBD;AAFtB,aAHF;AAOLvB,YAAAA,IAAI,EAAJA;AAPK,WAfmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B;;AA0BA,eAAeD,SAAf","sourcesContent":["import fetch from 'isomorphic-unfetch'\n\nimport Layout from '../../layouts/default'\n\nimport TitleBanner from '../../components/TitleBanner'\nimport ImageBanner from '../../components/ImageBanner'\nimport Listing from '../../components/Listing'\n\ntype JobsIndexProps = {\n  title: string,\n  body?: string,\n  image?: {\n    alt: string,\n    path: string\n  },\n  jobs?: []\n}\n\nconst JobsIndex = ({ jobs, title, body, image }: JobsIndexProps) => (\n  <Layout>\n    <TitleBanner title={title} />\n    <ImageBanner image={image} />\n    {image && <img src={`http://127.0.0.1:8888/${image}`} />}\n    {\n      jobs.map(({ id, attributes }, key) =>\n        <Listing\n          type={`job`}\n          id={id}\n          key={key}\n          {...attributes}\n        />\n      )\n    }\n  </Layout>\n)\n\nJobsIndex.getInitialProps = async () => {\n  // fetch page data\n  const pageResponse = await fetch('http://127.0.0.1:8888/jsonapi/node/page/d531df90-0fb9-4475-bdc6-8222b22924c7')\n  const { data: page } = await pageResponse.json()\n  const { title, body } = page.attributes\n\n  // fetch `jobs` content-types\n  const jobsResponse = await fetch('http://127.0.0.1:8888/jsonapi/node/jobs/')\n  const { data: jobs } = await jobsResponse.json()\n\n  // fetch `field_image`\n  const { field_image } = page.relationships\n  const imageResponse = await fetch(`${field_image.links.related.href}`)\n  const { data: image } = await imageResponse.json()\n\n  return {\n    title,\n    body,\n    image: {\n      path: image.attributes.uri.url,\n      alt: field_image.data.meta.alt\n    },\n    jobs\n  }\n}\n\nexport default JobsIndex\n"]},"metadata":{},"sourceType":"module"}