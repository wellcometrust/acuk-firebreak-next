{"ast":null,"code":"var _jsxFileName = \"/www/sites/firebreak-nextjs/src/pages/_error.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nvar Error = function Error(_ref) {\n  var statusCode = _ref.statusCode;\n  return __jsx(\"figure\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    alt: \"Showing a properly cat according the status code\",\n    width: \"100%\",\n    src: \"https://http.cat/\".concat(statusCode),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 4\n    },\n    __self: this\n  }), __jsx(\"figcaption\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, statusCode)));\n};\n\nError.getInitialProps = function (_ref2) {\n  var res = _ref2.res,\n      err = _ref2.err,\n      asPath = _ref2.asPath;\n  var statusCode = res ? res.statusCode : err ? err.statusCode : 404;\n\n  var checkForTrailingSlashes = function checkForTrailingSlashes() {\n    if (asPath.match(/\\/$/)) {\n      // check if the path ends with trailing slash\n      var withoutTrailingSlash = asPath.substr(0, asPath.length - 1);\n\n      if (res) {\n        res.writeHead(302, {\n          Location: withoutTrailingSlash\n        });\n        res.end();\n      } else {\n        Router.push(withoutTrailingSlash);\n      }\n    }\n  };\n\n  if (statusCode && statusCode === 404) {\n    checkForTrailingSlashes();\n  } else {//\n  }\n\n  return {\n    statusCode: statusCode\n  };\n};","map":{"version":3,"sources":["/www/sites/firebreak-nextjs/src/pages/_error.js"],"names":["Error","statusCode","getInitialProps","res","err","asPath","checkForTrailingSlashes","match","withoutTrailingSlash","substr","length","writeHead","Location","end","Router","push"],"mappings":";;;;AAAA,IAAMA,KAAK,GAAG,SAARA,KAAQ,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AAChC,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,GAAG,EAAC,kDADN;AAEE,IAAA,KAAK,EAAC,MAFR;AAGE,IAAA,GAAG,6BAAsBA,UAAtB,CAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,UAAL,CADF,CANF,CADF;AAYD,CAbD;;AAeAD,KAAK,CAACE,eAAN,GAAwB,iBAA0B;AAAA,MAAvBC,GAAuB,SAAvBA,GAAuB;AAAA,MAAlBC,GAAkB,SAAlBA,GAAkB;AAAA,MAAbC,MAAa,SAAbA,MAAa;AAChD,MAAMJ,UAAU,GAAGE,GAAG,GAAGA,GAAG,CAACF,UAAP,GAAoBG,GAAG,GAAGA,GAAG,CAACH,UAAP,GAAoB,GAAjE;;AAEA,MAAMK,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AACpC,QAAID,MAAM,CAACE,KAAP,CAAa,KAAb,CAAJ,EAAyB;AAAE;AACzB,UAAMC,oBAAoB,GAAGH,MAAM,CAACI,MAAP,CAAc,CAAd,EAAiBJ,MAAM,CAACK,MAAP,GAAgB,CAAjC,CAA7B;;AACA,UAAIP,GAAJ,EAAS;AACPA,QAAAA,GAAG,CAACQ,SAAJ,CAAc,GAAd,EAAmB;AACjBC,UAAAA,QAAQ,EAAEJ;AADO,SAAnB;AAGAL,QAAAA,GAAG,CAACU,GAAJ;AACD,OALD,MAKO;AACLC,QAAAA,MAAM,CAACC,IAAP,CAAYP,oBAAZ;AACD;AACF;AACF,GAZD;;AAcA,MAAIP,UAAU,IAAIA,UAAU,KAAK,GAAjC,EAAsC;AACpCK,IAAAA,uBAAuB;AACxB,GAFD,MAEO,CACL;AACD;;AACD,SAAO;AAAEL,IAAAA,UAAU,EAAVA;AAAF,GAAP;AACD,CAvBD","sourcesContent":["const Error = ({ statusCode }) => {\n  return (\n    <figure>\n      <img\n        alt=\"Showing a properly cat according the status code\"\n        width=\"100%\"\n        src={`https://http.cat/${statusCode}`}\n      />\n      <figcaption>\n        <h1>{statusCode}</h1>\n      </figcaption>\n    </figure>\n  );\n}\n\nError.getInitialProps = ({ res, err, asPath }) => {\n  const statusCode = res ? res.statusCode : err ? err.statusCode : 404;\n\n  const checkForTrailingSlashes = () => {\n    if (asPath.match(/\\/$/)) { // check if the path ends with trailing slash\n      const withoutTrailingSlash = asPath.substr(0, asPath.length - 1);\n      if (res) {\n        res.writeHead(302, {\n          Location: withoutTrailingSlash\n        })\n        res.end()\n      } else {\n        Router.push(withoutTrailingSlash)\n      }\n    }\n  }\n\n  if (statusCode && statusCode === 404) {\n    checkForTrailingSlashes();\n  } else {\n    //\n  }\n  return { statusCode };\n}\n"]},"metadata":{},"sourceType":"script"}