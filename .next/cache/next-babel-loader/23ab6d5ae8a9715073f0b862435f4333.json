{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/www/sites/firebreak-nextjs/src/pages/jobs/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../../layouts/default';\nimport TitleBanner from '../../components/TitleBanner';\nimport ImageBanner from '../../components/ImageBanner';\nimport JobListings from '../../components/JobListings';\n\nconst JobsIndex = ({\n  title,\n  body,\n  image,\n  jobs\n}) => __jsx(Layout, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}, __jsx(TitleBanner, {\n  title: title,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}), __jsx(ImageBanner, _extends({}, image, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n})), __jsx(JobListings, {\n  jobs: jobs,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23\n  },\n  __self: this\n}));\n\nexport default JobsIndex;\n/**\n * Sets initial props on the default export.\n *\n * @see https://nextjs.org/learn/basics/fetching-data-for-pages\n *\n * @todo use Promise.all() to wrap awaits; be careful of fail-fast\n * @todo `page` API endpoint should contain field_image data\n *\n */\n\nJobsIndex.getInitialProps = async () => {\n  /**\n   * Fetch all of the data for the page\n   *\n   * @todo rewrite destructuring for legibility\n   *\n   */\n  const response = await fetch(`${process.env.API_ROOT}/page/d531df90-0fb9-4475-bdc6-8222b22924c7`);\n  const {\n    data: page\n  } = await response.json();\n  const {\n    title,\n    body\n  } = page.attributes;\n  /**\n   * Fetch `field_image` using data in above response, we have to do this\n   * separately because it's an entity and only exists as a relationship\n   * with the node.\n   *\n   */\n\n  const {\n    field_image\n  } = page.relationships;\n  const imageResponse = await fetch(`${field_image.links.related.href}`);\n  const {\n    data: image\n  } = await imageResponse.json();\n  /**\n   * Fetch a list of jobs\n   */\n\n  const jobsResponse = await fetch(`${process.env.API_ROOT}/jobs/?sort=-created&filter[status][value]=1`);\n  const {\n    data: jobs\n  } = await jobsResponse.json();\n  return {\n    title,\n    body,\n    image: {\n      path: image.attributes.uri.url,\n      alt: field_image.data.meta.alt\n    },\n    jobs\n  };\n};","map":{"version":3,"sources":["/www/sites/firebreak-nextjs/src/pages/jobs/index.tsx"],"names":["fetch","Layout","TitleBanner","ImageBanner","JobListings","JobsIndex","title","body","image","jobs","getInitialProps","response","process","env","API_ROOT","data","page","json","attributes","field_image","relationships","imageResponse","links","related","href","jobsResponse","path","uri","url","alt","meta"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;;AAYA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAeC,EAAAA,KAAf;AAAsBC,EAAAA;AAAtB,CAAD,KAChB,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,MAAC,WAAD;AAAa,EAAA,KAAK,EAAEH,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEE,MAAC,WAAD,eAAiBE,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFF,EAGE,MAAC,WAAD;AAAa,EAAA,IAAI,EAAEC,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAHF,CADF;;AAQA,eAAeJ,SAAf;AAEA;;;;;;;;;;AASAA,SAAS,CAACK,eAAV,GAA4B,YAAY;AACtC;;;;;;AAMA,QAAMC,QAAQ,GAAG,MAAMX,KAAK,CAAE,GAAEY,OAAO,CAACC,GAAR,CAAYC,QAAS,4CAAzB,CAA5B;AACA,QAAM;AAAEC,IAAAA,IAAI,EAAEC;AAAR,MAAiB,MAAML,QAAQ,CAACM,IAAT,EAA7B;AACA,QAAM;AAAEX,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAkBS,IAAI,CAACE,UAA7B;AAEA;;;;;;;AAMA,QAAM;AAAEC,IAAAA;AAAF,MAAkBH,IAAI,CAACI,aAA7B;AACA,QAAMC,aAAa,GAAG,MAAMrB,KAAK,CAAE,GAAEmB,WAAW,CAACG,KAAZ,CAAkBC,OAAlB,CAA0BC,IAAK,EAAnC,CAAjC;AACA,QAAM;AAAET,IAAAA,IAAI,EAAEP;AAAR,MAAkB,MAAMa,aAAa,CAACJ,IAAd,EAA9B;AAEA;;;;AAGA,QAAMQ,YAAY,GAAG,MAAMzB,KAAK,CAAE,GAAEY,OAAO,CAACC,GAAR,CAAYC,QAAS,8CAAzB,CAAhC;AACA,QAAM;AAAEC,IAAAA,IAAI,EAAEN;AAAR,MAAiB,MAAMgB,YAAY,CAACR,IAAb,EAA7B;AAEA,SAAO;AACLX,IAAAA,KADK;AAELC,IAAAA,IAFK;AAGLC,IAAAA,KAAK,EAAE;AACLkB,MAAAA,IAAI,EAAElB,KAAK,CAACU,UAAN,CAAiBS,GAAjB,CAAqBC,GADtB;AAELC,MAAAA,GAAG,EAAEV,WAAW,CAACJ,IAAZ,CAAiBe,IAAjB,CAAsBD;AAFtB,KAHF;AAOLpB,IAAAA;AAPK,GAAP;AASD,CApCD","sourcesContent":["import fetch from 'isomorphic-unfetch'\n\nimport Layout from '../../layouts/default'\n\nimport TitleBanner from '../../components/TitleBanner'\nimport ImageBanner from '../../components/ImageBanner'\nimport JobListings from '../../components/JobListings'\n\ntype JobsIndexProps = {\n  title: string,\n  body?: string,\n  image?: {\n    alt: string,\n    path: string\n  },\n  jobs?: []\n}\n\nconst JobsIndex = ({ title, body, image, jobs }: JobsIndexProps) => (\n  <Layout>\n    <TitleBanner title={title} />\n    <ImageBanner {...image} />\n    <JobListings jobs={jobs} />\n  </Layout>\n)\n\nexport default JobsIndex\n\n/**\n * Sets initial props on the default export.\n *\n * @see https://nextjs.org/learn/basics/fetching-data-for-pages\n *\n * @todo use Promise.all() to wrap awaits; be careful of fail-fast\n * @todo `page` API endpoint should contain field_image data\n *\n */\nJobsIndex.getInitialProps = async () => {\n  /**\n   * Fetch all of the data for the page\n   *\n   * @todo rewrite destructuring for legibility\n   *\n   */\n  const response = await fetch(`${process.env.API_ROOT}/page/d531df90-0fb9-4475-bdc6-8222b22924c7`)\n  const { data: page } = await response.json()\n  const { title, body } = page.attributes\n\n  /**\n   * Fetch `field_image` using data in above response, we have to do this\n   * separately because it's an entity and only exists as a relationship\n   * with the node.\n   *\n   */\n  const { field_image } = page.relationships\n  const imageResponse = await fetch(`${field_image.links.related.href}`)\n  const { data: image } = await imageResponse.json()\n\n  /**\n   * Fetch a list of jobs\n   */\n  const jobsResponse = await fetch(`${process.env.API_ROOT}/jobs/?sort=-created&filter[status][value]=1`)\n  const { data: jobs } = await jobsResponse.json()\n\n  return {\n    title,\n    body,\n    image: {\n      path: image.attributes.uri.url,\n      alt: field_image.data.meta.alt\n    },\n    jobs\n  }\n}\n"]},"metadata":{},"sourceType":"module"}