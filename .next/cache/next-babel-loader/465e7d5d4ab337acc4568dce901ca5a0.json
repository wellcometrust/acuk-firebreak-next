{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/www/sites/firebreak-nextjs/src/pages/jobs/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../../layouts/default';\nimport TitleBanner from '../../components/TitleBanner';\nimport ImageBanner from '../../components/ImageBanner';\nimport Listing from '../../components/Listing';\n\nconst JobsIndex = ({\n  jobs,\n  title,\n  body,\n  image\n}) => __jsx(Layout, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}, __jsx(TitleBanner, {\n  title: title,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}), __jsx(ImageBanner, _extends({}, image, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n})), jobs.map(({\n  id,\n  attributes\n}, key) => __jsx(Listing, _extends({\n  type: `job`,\n  id: id,\n  key: key\n}, attributes, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n}))));\n\nJobsIndex.getInitialProps = async () => {\n  // fetch page data\n  const pageResponse = await fetch(`${process.env.API_ROOT}page/d531df90-0fb9-4475-bdc6-8222b22924c7`);\n  const {\n    data: page\n  } = await pageResponse.json();\n  const {\n    title,\n    body\n  } = page.attributes; // fetch `jobs` content-types\n\n  const jobsResponse = await fetch(`${process.env.API_ROOT}/jobs/`);\n  const {\n    data: jobs\n  } = await jobsResponse.json(); // fetch `field_image`\n\n  const {\n    field_image\n  } = page.relationships;\n  const imageResponse = await fetch(`${field_image.links.related.href}`);\n  const {\n    data: image\n  } = await imageResponse.json();\n  return {\n    title,\n    body,\n    image: {\n      path: image.attributes.uri.url,\n      alt: field_image.data.meta.alt\n    },\n    jobs\n  };\n};\n\nexport default JobsIndex;","map":{"version":3,"sources":["/www/sites/firebreak-nextjs/src/pages/jobs/index.tsx"],"names":["fetch","Layout","TitleBanner","ImageBanner","Listing","JobsIndex","jobs","title","body","image","map","id","attributes","key","getInitialProps","pageResponse","process","env","API_ROOT","data","page","json","jobsResponse","field_image","relationships","imageResponse","links","related","href","path","uri","url","alt","meta"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,OAAP,MAAoB,0BAApB;;AAYA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,IAAf;AAAqBC,EAAAA;AAArB,CAAD,KAChB,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,MAAC,WAAD;AAAa,EAAA,KAAK,EAAEF,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEE,MAAC,WAAD,eAAiBE,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFF,EAIIH,IAAI,CAACI,GAAL,CAAS,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAD,EAAqBC,GAArB,KACP,MAAC,OAAD;AACE,EAAA,IAAI,EAAG,KADT;AAEE,EAAA,EAAE,EAAEF,EAFN;AAGE,EAAA,GAAG,EAAEE;AAHP,GAIMD,UAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADF,CAJJ,CADF;;AAiBAP,SAAS,CAACS,eAAV,GAA4B,YAAY;AACtC;AACA,QAAMC,YAAY,GAAG,MAAMf,KAAK,CAAE,GAAEgB,OAAO,CAACC,GAAR,CAAYC,QAAS,2CAAzB,CAAhC;AACA,QAAM;AAAEC,IAAAA,IAAI,EAAEC;AAAR,MAAiB,MAAML,YAAY,CAACM,IAAb,EAA7B;AACA,QAAM;AAAEd,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAkBY,IAAI,CAACR,UAA7B,CAJsC,CAMtC;;AACA,QAAMU,YAAY,GAAG,MAAMtB,KAAK,CAAE,GAAEgB,OAAO,CAACC,GAAR,CAAYC,QAAS,QAAzB,CAAhC;AACA,QAAM;AAAEC,IAAAA,IAAI,EAAEb;AAAR,MAAiB,MAAMgB,YAAY,CAACD,IAAb,EAA7B,CARsC,CAUtC;;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAkBH,IAAI,CAACI,aAA7B;AACA,QAAMC,aAAa,GAAG,MAAMzB,KAAK,CAAE,GAAEuB,WAAW,CAACG,KAAZ,CAAkBC,OAAlB,CAA0BC,IAAK,EAAnC,CAAjC;AACA,QAAM;AAAET,IAAAA,IAAI,EAAEV;AAAR,MAAkB,MAAMgB,aAAa,CAACJ,IAAd,EAA9B;AAEA,SAAO;AACLd,IAAAA,KADK;AAELC,IAAAA,IAFK;AAGLC,IAAAA,KAAK,EAAE;AACLoB,MAAAA,IAAI,EAAEpB,KAAK,CAACG,UAAN,CAAiBkB,GAAjB,CAAqBC,GADtB;AAELC,MAAAA,GAAG,EAAET,WAAW,CAACJ,IAAZ,CAAiBc,IAAjB,CAAsBD;AAFtB,KAHF;AAOL1B,IAAAA;AAPK,GAAP;AASD,CAxBD;;AA0BA,eAAeD,SAAf","sourcesContent":["import fetch from 'isomorphic-unfetch'\n\nimport Layout from '../../layouts/default'\n\nimport TitleBanner from '../../components/TitleBanner'\nimport ImageBanner from '../../components/ImageBanner'\nimport Listing from '../../components/Listing'\n\ntype JobsIndexProps = {\n  title: string,\n  body?: string,\n  image?: {\n    alt: string,\n    path: string\n  },\n  jobs?: []\n}\n\nconst JobsIndex = ({ jobs, title, body, image }: JobsIndexProps) => (\n  <Layout>\n    <TitleBanner title={title} />\n    <ImageBanner {...image} />\n    {\n      jobs.map(({ id, attributes }, key) =>\n        <Listing\n          type={`job`}\n          id={id}\n          key={key}\n          {...attributes}\n        />\n      )\n    }\n  </Layout>\n)\n\nJobsIndex.getInitialProps = async () => {\n  // fetch page data\n  const pageResponse = await fetch(`${process.env.API_ROOT}page/d531df90-0fb9-4475-bdc6-8222b22924c7`)\n  const { data: page } = await pageResponse.json()\n  const { title, body } = page.attributes\n\n  // fetch `jobs` content-types\n  const jobsResponse = await fetch(`${process.env.API_ROOT}/jobs/`)\n  const { data: jobs } = await jobsResponse.json()\n\n  // fetch `field_image`\n  const { field_image } = page.relationships\n  const imageResponse = await fetch(`${field_image.links.related.href}`)\n  const { data: image } = await imageResponse.json()\n\n  return {\n    title,\n    body,\n    image: {\n      path: image.attributes.uri.url,\n      alt: field_image.data.meta.alt\n    },\n    jobs\n  }\n}\n\nexport default JobsIndex\n"]},"metadata":{},"sourceType":"module"}